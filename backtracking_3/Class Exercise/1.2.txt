Single File Programming Question
Problem Statement



﻿In the peaceful city of PuzzleTown, there's a legendary 9x9 magic board, known as the Sudoku Crystal. This crystal controls the city's weather, and every night it resets itself, leaving some tiles blank (represented by 0).



Your task is to become PuzzleTown’s next "Puzzle Guardian" by restoring the crystal back to its solved state before sunrise!



You are given a 9x9 grid. Each row contains 9 digits. Some of the digits are missing (represented by 0). Your goal is to fill in the empty cells so that:



Every number from 1 to 9 appears exactly once in each row, column, and 3x3 subgrid.

Input format :
The input consists of 9 lines will contain 9 integers separated by spaces of that 0 represents an empty cell.

Output format :
The output prints the completed Sudoku board, 9 lines of 9 integers each.

Each number should be separated by a space.



Refer to the sample output for formatting specifications.

Code constraints :
0 ≤ integers ≤ 9

Sample test cases :
Input 1 :
5 3 0 0 7 0 0 0 0
6 0 0 1 9 5 0 0 0
0 9 8 0 0 0 0 6 0
8 0 0 0 6 0 0 0 3
4 0 0 8 0 3 0 0 1
7 0 0 0 2 0 0 0 6
0 6 0 0 0 0 2 8 0
0 0 0 4 1 9 0 0 5
0 0 0 0 8 0 0 7 9
Output 1 :
5 3 4 6 7 8 9 1 2 
6 7 2 1 9 5 3 4 8 
1 9 8 3 4 2 5 6 7 
8 5 9 7 6 1 4 2 3 
4 2 6 8 5 3 7 9 1 
7 1 3 9 2 4 8 5 6 
9 6 1 5 3 7 2 8 4 
2 8 7 4 1 9 6 3 5 
3 4 5 2 8 6 1 7 9 
Input 2 :
0 0 0 0 0 0 0 0 0
0 0 0 6 0 0 0 0 3
0 7 0 0 9 0 2 0 0
0 5 0 1 0 0 0 0 0
0 0 0 0 8 0 0 7 0
0 0 0 0 0 0 0 0 8
0 0 0 0 0 0 1 0 0
0 0 0 0 0 0 0 0 0
0 0 0 4 0 0 0 0 0
Output 2 :
1 2 3 5 4 7 6 8 9 
4 8 9 6 1 2 7 5 3 
5 7 6 3 9 8 2 1 4 
2 5 8 1 7 3 4 9 6 
3 9 4 2 8 6 5 7 1 
6 1 7 9 5 4 3 2 8 
7 3 2 8 6 9 1 4 5 
8 4 1 7 3 5 9 6 2 
9 6 5 4 2 1 8 3 7 









#include <bits/stdc++.h>
using namespace std;

int grid[9][9];

bool isSafe(int row, int col, int num) {
    for(int i=0;i<9;i++)
        if(grid[row][i]==num || grid[i][col]==num) return false;
    
    int startRow = row - row%3;
    int startCol = col - col%3;
    for(int i=0;i<3;i++)
        for(int j=0;j<3;j++)
            if(grid[startRow+i][startCol+j]==num) return false;
    
    return true;
}

bool solve() {
    for(int row=0;row<9;row++) {
        for(int col=0;col<9;col++) {
            if(grid[row][col]==0) {
                for(int num=1;num<=9;num++) {
                    if(isSafe(row,col,num)) {
                        grid[row][col]=num;
                        if(solve()) return true;
                        grid[row][col]=0;
                    }
                }
                return false;
            }
        }
    }
    return true;
}

int main() {
    for(int i=0;i<9;i++)
        for(int j=0;j<9;j++)
            cin >> grid[i][j];
    
    solve();
    
    for(int i=0;i<9;i++) {
        for(int j=0;j<9;j++)
            cout << grid[i][j] << " ";
        cout << "\n";
    }
}
