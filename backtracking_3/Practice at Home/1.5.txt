Single File Programming Question
Problem Statement



A mysterious hacker group called “The Glitchers” has locked down the central control system of a futuristic city by corrupting its 9x9 security matrix. They’ve scrambled some of the entries and left the rest empty (represented by 0), challenging anyone to restore it.



The only way to regain control and stop the countdown to total system blackout is to restore the matrix to its original secure state.



As the city's top cryptographer, it’s your mission to decrypt this matrix and restore the security protocol.



To solve it, the restored matrix must follow these rules:



Every digit from 1 to 9 must appear exactly once in each row, column, and 3x3 sub-matrix.

Input format :
The input consists of 9 lines will contain 9 integers separated by spaces of that 0 represents an empty cell.

Output format :
The output prints the completed Sudoku board, 9 lines of 9 integers each.

Each number should be separated by a space.



Refer to the sample output for formatting specifications.

Code constraints :
0 ≤ integers ≤ 9

Sample test cases :
Input 1 :
0 0 0 0 0 0 0 0 0
0 0 0 6 0 0 0 0 3
0 7 0 0 9 0 2 0 0
0 5 0 1 0 0 0 0 0
0 0 0 0 8 0 0 7 0
0 0 0 0 0 0 0 0 8
0 0 0 0 0 0 1 0 0
0 0 0 0 0 0 0 0 0
0 0 0 4 0 0 0 0 0
Output 1 :
1 2 3 5 4 7 6 8 9 
4 8 9 6 1 2 7 5 3 
5 7 6 3 9 8 2 1 4 
2 5 8 1 7 3 4 9 6 
3 9 4 2 8 6 5 7 1 
6 1 7 9 5 4 3 2 8 
7 3 2 8 6 9 1 4 5 
8 4 1 7 3 5 9 6 2 
9 6 5 4 2 1 8 3 7 
Input 2 :
0 6 0 1 0 4 0 5 0
0 0 8 3 0 5 6 0 0
2 0 0 0 0 0 0 0 1
8 0 0 4 0 7 0 0 6
0 0 6 0 0 0 3 0 0
7 0 0 9 0 1 0 0 4
5 0 0 0 0 0 0 0 2
0 0 7 2 0 6 9 0 0
0 4 0 5 0 8 0 7 0
Output 2 :
9 6 3 1 7 4 2 5 8 
1 7 8 3 2 5 6 4 9 
2 5 4 6 8 9 7 3 1 
8 2 1 4 3 7 5 9 6 
4 9 6 8 5 2 3 1 7 
7 3 5 9 6 1 8 2 4 
5 8 9 7 1 3 4 6 2 
3 1 7 2 4 6 9 8 5 
6 4 2 5 9 8 1 7 3 
Input 3 :
0 0 0 0 0 0 2 0 0
0 8 0 0 0 7 0 9 0
6 0 2 0 0 0 5 0 0
0 7 0 0 6 0 0 0 0
0 0 0 9 0 1 0 0 0
0 0 0 0 2 0 0 4 0
0 0 5 0 0 0 6 0 3
0 9 0 4 0 0 0 7 0
0 0 6 0 0 0 0 0 0
Output 3 :
9 5 7 6 1 3 2 8 4 
4 8 3 2 5 7 1 9 6 
6 1 2 8 4 9 5 3 7 
1 7 8 3 6 4 9 5 2 
5 2 4 9 7 1 3 6 8 
3 6 9 5 2 8 7 4 1 
8 4 5 7 9 2 6 1 3 
2 9 1 4 3 6 8 7 5 
7 3 6 1 8 5 4 2 9 







#include <bits/stdc++.h>
using namespace std;

int grid[9][9];

bool isSafe(int r, int c, int num) {
    for (int i = 0; i < 9; ++i)
        if (grid[r][i] == num || grid[i][c] == num) return false;

    int sr = (r / 3) * 3, sc = (c / 3) * 3;
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            if (grid[sr + i][sc + j] == num) return false;

    return true;
}

bool solve() {
    for (int r = 0; r < 9; ++r) {
        for (int c = 0; c < 9; ++c) {
            if (grid[r][c] == 0) {
                for (int num = 1; num <= 9; ++num) {
                    if (isSafe(r, c, num)) {
                        grid[r][c] = num;
                        if (solve()) return true;
                        grid[r][c] = 0;
                    }
                }
                return false;
            }
        }
    }
    return true;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    for (int i = 0; i < 9; ++i)
        for (int j = 0; j < 9; ++j)
            cin >> grid[i][j];

    solve();

    for (int i = 0; i < 9; ++i) {
        for (int j = 0; j < 9; ++j)
            cout << grid[i][j] << " ";  // Always add trailing space
        cout << "\n";
    }
    return 0;
}
