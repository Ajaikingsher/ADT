Single File Programming Question
Problem Statement



In the celestial archives of the Starforge Citadel, a powerful construct known as the Astro Grid governs the alignment of stars and the balance of cosmic energy. This grid, a sacred 9x9 matrix, is maintained by the Order of Astrarithms, a group of ancient starmancers who use prime frequencies instead of traditional numbers.



Unlike Earth mathematics, the Astro Grid resonates only with celestial prime tones encoded as numbers between 11 and 19:

{11, 12, 13, 14, 15, 16, 17, 18, 19}



These tones ensure that:

No two frequencies repeat in a single row, column, or sub-sector (3x3 grid),

The harmony of the universe is preserved.



But during the eclipse of the twin moons, chaotic void energy distorts parts of the Astro Grid, leaving blank cells and threatening cosmic disarray. As the newly appointed Celestial Decoder, your duty is to restore the grid before the eclipse ends—using logic, precision, and the sacred prime codes.



Only when the Astro Grid is fully restored can the universe realign and peace echo through the stars once again.

Input format :
The input consists of 9 lines will contain 9 integers separated by spaces of that 0 represents an empty cell.

Output format :
The output prints the completed Sudoku board, 9 lines of 9 integers each.

Each number should be separated by a space.



Refer to the sample output for formatting specifications.

Code constraints :
11 ≤ integers ≤ 19

Sample test cases :
Input 1 :
11 0 13 0 15 0 0 18 0
0 15 16 0 18 19 0 12 13
17 18 0 11 0 13 0 15 16
0 13 14 0 16 17 18 0 11
15 0 17 18 0 11 12 13 0
0 19 11 0 13 14 0 16 17
13 0 15 16 0 18 0 11 0
16 0 18 19 0 12 0 14 0
0 11 0 13 14 0 16 17 18
Output 1 :
11 12 13 14 15 16 17 18 19 
14 15 16 17 18 19 11 12 13 
17 18 19 11 12 13 14 15 16 
12 13 14 15 16 17 18 19 11 
15 16 17 18 19 11 12 13 14 
18 19 11 12 13 14 15 16 17 
13 14 15 16 17 18 19 11 12 
16 17 18 19 11 12 13 14 15 
19 11 12 13 14 15 16 17 18 
Input 2 :
19 0 12 13 0 0 16 0 18
0 12 0 0 15 0 17 0 19
0 0 16 17 0 0 11 12 0
17 18 19 0 0 0 0 0 16
0 13 14 15 0 17 0 0 11
0 0 17 18 0 0 0 13 14
18 19 11 0 13 0 15 0 0
13 14 0 16 0 18 19 11 12
16 0 0 19 0 0 13 14 0
Output 2 :
No solution exists.





#include <bits/stdc++.h>
using namespace std;

bool isSafe(vector<vector<int>>& grid, int row, int col, int num) {
    for (int x = 0; x < 9; x++) {
        if (grid[row][x] == num) return false;
        if (grid[x][col] == num) return false;
    }
    int startRow = row - row % 3;
    int startCol = col - col % 3;
    for (int i = 0; i < 3; i++)
        for (int j = 0; j < 3; j++)
            if (grid[startRow + i][startCol + j] == num) return false;
    return true;
}

bool solveSudoku(vector<vector<int>>& grid) {
    for (int row = 0; row < 9; row++) {
        for (int col = 0; col < 9; col++) {
            if (grid[row][col] == 0) {
                for (int num = 11; num <= 19; num++) {
                    if (isSafe(grid, row, col, num)) {
                        grid[row][col] = num;
                        if (solveSudoku(grid)) return true;
                        grid[row][col] = 0;
                    }
                }
                return false;
            }
        }
    }
    return true;
}

int main() {
    vector<vector<int>> grid(9, vector<int>(9));
    for (int i = 0; i < 9; i++)
        for (int j = 0; j < 9; j++)
            cin >> grid[i][j];

    if (solveSudoku(grid)) {
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                cout << grid[i][j] << " ";
            }
            cout << "\n";  // Trailing space preserved
        }
    } else {
        cout << "No solution exists.\n";
    }
    return 0;
}


