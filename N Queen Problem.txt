#include <bits/stdc++.h>
using namespace std;

// Check if it's safe to place a queen at (row, col)
bool isSafe(vector<vector<int>>& board, int row, int col, int n) {
    for (int i = 0; i < row; i++)
        if (board[i][col] || 
            (col - (row - i) >= 0 && board[i][col - (row - i)]) || 
            (col + (row - i) < n && board[i][col + (row - i)]))
            return false;
    return true;
}

// Recursive function to place queens
bool solveNQueens(int row, vector<vector<int>>& board, int n) {
    if (row == n) return true;

    for (int col = 0; col < n; col++) {
        if (isSafe(board, row, col, n)) {
            board[row][col] = 1;
            if (solveNQueens(row + 1, board, n)) return true;
            board[row][col] = 0; // backtrack
        }
    }
    return false;
}

// Function to get the solution
vector<int> nQueen(int n) {
    vector<vector<int>> board(n, vector<int>(n, 0));
    if (!solveNQueens(0, board, n)) return {-1};

    vector<int> ans;
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            if (board[i][j]) ans.push_back(j + 1);
    return ans;
}

// Main
int main() {
    int n = 4;
    vector<int> ans = nQueen(n);
    for (int x : ans) cout << x << " ";
}
