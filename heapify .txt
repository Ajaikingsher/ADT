#include <bits/stdc++.h>
using namespace std;

// Heapify a subtree rooted at i
void heapify(vector<int>& arr, int n, int i) {
    int largest = i;             // root
    int l = 2 * i + 1;           // left
    int r = 2 * i + 2;           // right

    if (l < n && arr[l] > arr[largest]) largest = l;
    if (r < n && arr[r] > arr[largest]) largest = r;

    if (largest != i) {
        swap(arr[i], arr[largest]);
        heapify(arr, n, largest); // recursive call
    }
}

// Heap sort function
void heapSort(vector<int>& arr) {
    int n = arr.size();
    for (int i = n / 2 - 1; i >= 0; i--) heapify(arr, n, i); // build heap
    for (int i = n - 1; i > 0; i--) {
        swap(arr[0], arr[i]);
        heapify(arr, i, 0); // heapify reduced heap
    }
}

// Print array
void printArray(vector<int>& arr) {
    for (int x : arr) cout << x << " ";
    cout << "\n";
}

// Main
int main() {
    vector<int> arr = {9, 4, 3, 8, 10, 2, 5};
    heapSort(arr);
    cout << "Sorted array: ";
    printArray(arr);
}
