def rabin_karp(text, pattern):
    base = 256          # number of characters
    mod = 101           # a prime number
    n = len(text)
    m = len(pattern)
    
    # Compute hash of pattern and first window
    p_hash = 0
    t_hash = 0
    h = 1               # base^(m-1)
    
    for i in range(m-1):
        h = (h * base) % mod
    
    for i in range(m):
        p_hash = (base * p_hash + ord(pattern[i])) % mod
        t_hash = (base * t_hash + ord(text[i])) % mod
    
    # Slide the pattern over text
    for i in range(n - m + 1):
        if p_hash == t_hash:
            if text[i:i+m] == pattern:
                print(f"Pattern found at index {i}")
        
        if i < n - m:
            t_hash = (base * (t_hash - ord(text[i]) * h) + ord(text[i + m])) % mod
            if t_hash < 0:
                t_hash += mod

# Example
text = "ABABDABACDABABCABAB"
pattern = "ABABCABAB"
rabin_karp(text, pattern)
